alias gs='git status'
alias gb='git branch'
alias gc='git commit -m'
alias ga='git add .'
alias gph='git push heroku master'
alias be='bundle exec'

alias subl='~/bin/subl'

CREATE .rvmrc  (Does this need @ gemfile or is comment in Gemfile OK? )
-----------------------------------------------------------------------
rvm use 2.0.0
-----------------------------------------------------------------------

rails new aap1 --skip-test-unit
cd aap1
git init
git add .
git commit -m "Initial"

/* Github - create remote repository "aap1"

git remote add origin https://github.com/captainkello/aap1.git
git push -u origin master
git status



/* Update Gem file
-----------------------------------------------------------------------
source 'https://rubygems.org'
ruby '2.0.0'
#ruby-gemset=2013.9.8_rails_4_0

gem 'rails', '4.0.0'
gem 'bootstrap-sass', '2.3.2.0'
gem 'bcrypt-ruby', '3.0.1'
gem 'faker', '1.1.2'
gem 'will_paginate', '3.0.4'
gem 'bootstrap-will_paginate', '0.0.9'

group :development, :test do
  gem 'sqlite3', '1.3.7'
  gem 'rspec-rails', '2.13.1'
  # The following optional lines are part of the advanced setup.
  # gem 'guard-rspec', '2.5.0'
  # gem 'spork-rails', github: 'sporkrb/spork-rails'
  # gem 'guard-spork', '1.5.0'
  # gem 'childprocess', '0.3.6'
end

group :test do
  gem 'selenium-webdriver', '2.35.1'
  gem 'capybara', '2.1.0'
  gem 'factory_girl_rails', '4.2.0'
  gem 'cucumber-rails', '1.4.0', :require => false
  gem 'database_cleaner', github: 'bmabey/database_cleaner'

  # Uncomment this line on OS X.
  gem 'growl', '1.0.3'

  # Uncomment these lines on Linux.
  # gem 'libnotify', '0.8.0'

  # Uncomment these lines on Windows.
  # gem 'rb-notifu', '0.0.4'
  # gem 'win32console', '1.3.2'
  # gem 'wdm', '0.1.0'
end

gem 'sass-rails', '4.0.0'
gem 'uglifier', '2.1.1'
gem 'coffee-rails', '4.0.0'
gem 'jquery-rails', '3.0.4'
gem 'turbolinks', '1.1.1'
gem 'jbuilder', '1.0.2'

group :doc do
  gem 'sdoc', '0.3.20', require: false
end

group :production do
  gem 'pg', '0.15.1'
  # Rails_12factor is used by Heroku to serve static assets such as images and stylesheets.
  gem 'rails_12factor', '0.0.2'
end
-----------------------------------------------------------------------


*/

bundle install --without production
bundle update
bundle install

git add .
git push



/*  Suppress the installation of production gems using the option --without production. This is a “remembered option”, which means that you don’t have to include it in future invocations of Bundler. Instead, you can write simply bundle install and production gems will be ignored automatically.




If this application is shared as a public Github repository, it’s important to update the secret token used to encrypt session variables so that it is dynamically generated rather than hard-coded. 

*/

config/initializers/secret_token.rb
-----------------------------------------------------------------------
# Be sure to restart your server when you modify this file.

# Your secret key is used for verifying the integrity of signed cookies.
# If you change this key, all old signed cookies will become invalid!

# Make sure the secret is at least 30 characters and all random,
# no regular words or you'll be exposed to dictionary attacks.
# You can use `rake secret` to generate a secure secret key.

# Make sure your secret_key_base is kept private
# if you're sharing your code publicly.
require 'securerandom'

def secure_token
  token_file = Rails.root.join('.secret')
  if File.exist?(token_file)
    # Use the existing token.
    File.read(token_file).chomp
  else
    # Generate a new token and store it in token_file.
    token = SecureRandom.hex(64)
    File.write(token_file, token)
    token
  end
end

SampleApp::Application.config.secret_key_base = secure_token
-----------------------------------------------------------------------



/* Be sure to update .gitignore so that the .secret key isn’t exposed in your repository.
*/

.gitignore
-----------------------------------------------------------------------
# Ignore bundler config.
/.bundle

# Ignore the default SQLite database.
/db/*.sqlite3
/db/*.sqlite3-journal

# Ignore all logfiles and tempfiles.
/log/*.log
/tmp

# Ignore other unneeded files.
database.yml
doc/
*.swp
*~
.project
.DS_Store
.idea
.secret
-----------------------------------------------------------------------

RESTART RAILS SERVER

git add .
git push


============================================================
Go to Listing 3.9. to begin testing with Rspec

I BELIEVE YOU HAVE TO DO THIS EVEN IF RSPEC IS IN GEMFILE ?

rails generate rspec:install

I RAN IT AND NOW GET THE ERROR

/Users/p2/.rvm/gems/ruby-2.0.0-p247@2013.9.8_rails_4_0/gems/activerecord-4.0.0/lib/active_record/migration.rb:379:in `check_pending!': Migrations are pending; run 'rake db:migrate RAILS_ENV=test' to resolve this issue. (ActiveRecord::PendingMigrationError)

Fixed with 'rake db:migrate RAILS_ENV=test'     2013.9.9  cna


rails g integration_test static_pages

Begin editing from Listing 3.9  2013.9.9 cna  To Start Testing ??????
============================================================



CREATE A Home, About, Contact with routes AND  

rails g controller StaticPages home adopt give volunteer



FYI:  
rails destroy controller StaticPages
rails destroy model Pet

rake db:rollback
rake db:migrate VERSION=0

=============================================================
heroku create and PUSH TO HEROKU

heroku remote

heroku create
git push heroku master
heroku run rake db:migrate

git push
git push heroku
heroku run rake db:migrate

heroku logs

============================================================


/* The /app/assets directory isn’t the only place that we can add assets. If we create an assets directory under /lib any files we add there will be accessible from there as if they were in the main /app/assets directory. This also applies to any files under a /vendor/assets directory.

If you have assets that are not really specific to the current application then assets directories under either /lib or /vendor are ideal places for them. If our app uses a jQuery plugin then the /vendor/assets directory is a good place for its JavaScript files as these are something that’s maintained by someone else. For assets that we do maintain but which aren’t specific to our application the /lib directory is a good place.

At its most basic the asset pipeline is a list of loadpaths. We can see this list by running the console and viewing Rails.application.config.assets.paths. We’ll view the output as YAML to make it easier to read.  
*/

/* This is interesting because it means that Ruby gems are no longer just about managing Ruby code. We can use them to manage Javascript and any other assets in them as well. It’s likely that we’ll soon see more JavaScript libraries being distributed as Ruby gems so that they can have all of the benefits of Bundler and the dependency management it provides.
*/

Where to put images?
Because we used the <%= image_tag  %> helper, Rails will automatically find any images in that directory using the asset pipeline 

?/assets/images/dog3.jpg

<%= link_to image_tag("rails.png", alt: "Rails"), '#' %>


============================================================
Create database

rails g scaffold Pet title:string body:text image:string

============================================================

Work on index and show pages to add images

/* Template Caching
By default, Rails will compile each template to a method in order to render it. When you alter a template, Rails will check the file's modification time and recompile it in development mode. */

Now add bootstrap!

/* HTML5 adds the header, nav, and section elements for divisions common to many applications. In this case, each div has a CSS class as well. As with the header tag’s classes, these classes have special meaning to Bootstrap.  
*/

Later....

Update with custom titles for pages and expand tests  Listing 3.18

expect(page).to have_title("Adopt a Pet Today App | Home")


============================================================

n Rails 4, there are three canonical directories for static assets, each with its own purpose:

app/assets: assets specific to the present application
lib/assets: assets for libraries written by your dev team
vendor/assets: assets from third-party vendors

============================================================


Add login?







